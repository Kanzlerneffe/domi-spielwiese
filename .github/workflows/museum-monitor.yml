name: Nintendo Museum Ticket Monitor 🎮

on:
  schedule:
    - cron: '*/10 6-22 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  monitor-nintendo-tickets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install node-fetch
        run: npm install node-fetch
        
      - name: Monitor Nintendo Museum Tickets
        uses: actions/github-script@v7
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            console.log('🎮 Starting Nintendo Museum monitoring...');
            
            // Verwende die EXAKT GLEICHE Telegram-Methode wie im Test!
            async function sendTelegramMessage(message) {
              try {
                const fetch = (await import('node-fetch')).default;
                console.log('📤 Sending message to chat ID:', process.env.TELEGRAM_CHAT_ID);
                
                const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    chat_id: process.env.TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                  })
                });
                
                const responseText = await response.text();
                console.log('Response Status:', response.status);
                console.log('Response Body:', responseText);
                
                if (response.ok) {
                  const result = JSON.parse(responseText);
                  if (result.ok) {
                    console.log('✅ SUCCESS! Message sent successfully!');
                    return true;
                  } else {
                    console.error('❌ Telegram API error:', result.description);
                    return false;
                  }
                } else {
                  console.error('❌ Failed to send message:', responseText);
                  return false;
                }
              } catch (error) {
                console.error('💥 Error sending message:', error.message);
                return false;
              }
            }
            
            // Nintendo Museum Check (SUPER EINFACH erstmal)
            try {
              console.log('🔍 Checking Nintendo Museum status...');
              
              const fetch = (await import('node-fetch')).default;
              const response = await fetch('https://museum-tickets.nintendo.com/en/calendar');
              
              let statusMessage = '';
              
              if (response.ok) {
                const html = await response.text();
                console.log('📄 Page loaded successfully, size:', html.length);
                
                // Einfache Check-Logik für jetzt
                const currentTime = new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'});
                
                statusMessage = `🎮 <b>Nintendo Museum Status Update</b>
                
📅 <b>September 2025</b>
⚡ Live-Monitoring alle 10 Minuten

🔍 <b>Status-Check:</b>
✅ Website erreichbar
📄 Seite geladen (${Math.round(html.length/1000)}KB)
⏰ Geprüft: ${currentTime}

🎯 <b>Nächste Funktionen:</b>
• Verfügbarkeits-Erkennung wird implementiert
• Basierend auf deiner API-Analyse: sale_status: 1 = verfügbar

🔗 <a href="https://museum-tickets.nintendo.com/en/calendar">Zur Buchungsseite</a>

⚡ Nächste Prüfung: in 10 Minuten`;

              } else {
                statusMessage = `❌ <b>Nintendo Museum Monitor Fehler</b>
                
⏰ ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}
🔧 Website nicht erreichbar (Status: ${response.status})
🔄 Versuche es beim nächsten Check erneut...

⚡ Nächste Prüfung: in 10 Minuten`;
              }
              
              // Nachricht senden mit bewährter Methode
              const success = await sendTelegramMessage(statusMessage);
              
              if (success) {
                console.log('🎉 Monitor update sent successfully!');
              } else {
                console.error('❌ Failed to send monitor update');
              }
              
            } catch (error) {
              console.error('💥 Monitor error:', error.message);
              
              // Fehler-Nachricht senden
              const errorMessage = `❌ <b>Nintendo Museum Monitor Fehler</b>
              
⏰ ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}
🔧 ${error.message}
🔄 System wird beim nächsten Check neu versuchen...`;
              
              await sendTelegramMessage(errorMessage);
            }
