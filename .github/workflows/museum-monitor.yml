name: Museum Slot Monitor

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write

jobs:
  check-museum-slots:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install axios cheerio

      - name: Check for slots
        uses: actions/github-script@v6
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const axios = require('axios');
            
            async function sendTelegramMessage(message) {
              try {
                console.log('Versuche Telegram-Nachricht zu senden...');
                
                if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
                  throw new Error('Telegram Credentials fehlen!');
                }
                
                const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
                console.log(`Sende an Chat ID: ${process.env.TELEGRAM_CHAT_ID}`);
                
                const response = await axios.post(telegramUrl, {
                  chat_id: process.env.TELEGRAM_CHAT_ID,
                  text: message,
                  parse_mode: 'HTML'
                });
                
                console.log('Telegram-Nachricht erfolgreich gesendet!');
                return response.data;
              } catch (error) {
                console.error('Fehler beim Senden der Telegram-Nachricht:', error);
                throw error;
              }
            }

            function getDaysInMonth(year, month) {
              return new Date(year, month, 0).getDate();
            }
            
            async function fetchCalendarData() {
              try {
                const response = await axios.get('https://museum-tickets.nintendo.com/en/calendar', {
                  headers: {
                    'Accept': 'text/html',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                  }
                });
                
                const html = response.data;
                const dataLayerMatch = html.match(/window\.dataLayer\s*=\s*(\[.*?\]);/s);
                if (dataLayerMatch) {
                  const dataLayer = JSON.parse(dataLayerMatch[1]);
                  return dataLayer;
                }
                return null;
              } catch (error) {
                console.error('Fehler beim Laden der Kalenderseite:', error);
                throw error;
              }
            }
            
            async function checkSeptemberSlots() {
              try {
                console.log('Starte Überprüfung der September 2024 Slots...');
                
                const calendarData = await fetchCalendarData();
                if (!calendarData) {
                  throw new Error('Keine Kalenderdaten gefunden');
                }
                
                // Suche nach September 2024 Daten im dataLayer
                const septemberData = calendarData.find(item => 
                  item.calendar && 
                  item.calendar.dates && 
                  Object.keys(item.calendar.dates).some(date => date.startsWith('2024-09'))
                );
                
                // Erstelle ein Objekt mit allen Tagen des Septembers
                const totalDays = getDaysInMonth(2024, 9);
                const allSeptemberDays = {};
                for (let day = 1; day <= totalDays; day++) {
                  const date = `2024-09-${day.toString().padStart(2, '0')}`;
                  allSeptemberDays[date] = {
                    date: date,
                    available: false,
                    slots: []
                  };
                }
                
                // Fülle die verfügbaren Daten ein
                if (septemberData && septemberData.calendar && septemberData.calendar.dates) {
                  Object.entries(septemberData.calendar.dates)
                    .filter(([date]) => date.startsWith('2024-09'))
                    .forEach(([date, dateData]) => {
                      const slots = dateData.timeslots || [];
                      const availableSlots = slots.filter(slot => slot.available);
                      
                      allSeptemberDays[date] = {
                        date: date,
                        available: availableSlots.length > 0,
                        slots: slots.map(slot => ({
                          time: slot.time,
                          available: slot.available,
                          remaining: slot.remaining_tickets
                        }))
                      };
                    });
                }
                
                // Erstelle die Nachricht
                let message = `🎮 <b>Nintendo Museum Status Update - September 2024</b>\n\n`;
                
                // Gruppiere nach Wochen für bessere Übersicht
                const weeks = {};
                Object.values(allSeptemberDays).forEach(day => {
                  const date = new Date(day.date);
                  const weekNum = Math.ceil(date.getDate() / 7);
                  if (!weeks[weekNum]) weeks[weekNum] = [];
                  weeks[weekNum].push(day);
                });
                
                // Füge jede Woche zur Nachricht hinzu
                Object.entries(weeks).forEach(([weekNum, days]) => {
                  message += `\n<b>Woche ${weekNum}:</b>\n`;
                  days.forEach(day => {
                    const date = new Date(day.date);
                    const dayName = date.toLocaleDateString('de-DE', { weekday: 'short' });
                    const dayNum = date.getDate();
                    
                    if (day.slots.length === 0) {
                      message += `📅 ${dayName} ${dayNum}: aktuell nicht verfügbar\n`;
                    } else {
                      message += `📅 ${dayName} ${dayNum}:\n`;
                      day.slots.forEach(slot => {
                        const status = slot.available 
                          ? `✅ ${slot.remaining} Tickets verfügbar` 
                          : '❌ ausgebucht';
                        message += `⏰ ${slot.time}: ${status}\n`;
                      });
                    }
                  });
                  message += '\n';
                });
                
                message += `\n🔗 <b>Buchungslink:</b> https://museum-tickets.nintendo.com/en/calendar`;
                
                // Sende die Nachricht
                await sendTelegramMessage(message);
                
                // Wenn es verfügbare Slots gibt, erstelle auch ein Issue
                const hasAvailableSlots = Object.values(allSeptemberDays)
                  .some(day => day.slots.some(slot => slot.available));
                
                if (hasAvailableSlots) {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `🎮 Freie Slots im September 2024 gefunden!`,
                    body: message.replace(/<\/?b>/g, '**')
                  });
                }
                
              } catch (error) {
                console.error('Fehler beim Überprüfen der Slots:', error);
                const errorMessage = `❌ <b>Fehler beim Überprüfen der Museum-Slots:</b>\n\n${error.message}\n\nDer Bot läuft weiter und prüft beim nächsten Durchlauf erneut.`;
                await sendTelegramMessage(errorMessage);
                core.setFailed(error.message);
              }
            }
            
            await checkSeptemberSlots();
