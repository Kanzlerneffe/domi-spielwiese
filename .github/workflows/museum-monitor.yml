name: Nintendo Museum Ticket Monitor 🎮

on:
  schedule:
    - cron: '*/15 6-22 * * *'  # Weniger häufig = weniger verdächtig
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  monitor-nintendo-tickets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Playwright
        run: |
          npm install playwright
          npx playwright install chromium
          
      - name: Monitor Nintendo Museum Tickets
        uses: actions/github-script@v7
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const https = require('https');
            const { chromium } = require('playwright');
            
            // 📡 Telegram Message Function
            async function sendTelegramMessage(message) {
              return new Promise((resolve, reject) => {
                const data = JSON.stringify({
                  chat_id: process.env.TELEGRAM_CHAT_ID,
                  text: message,
                  parse_mode: 'HTML'
                });
                
                const options = {
                  hostname: 'api.telegram.org',
                  port: 443,
                  path: `/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': data.length
                  }
                };
                
                const req = https.request(options, (res) => {
                  let responseData = '';
                  res.on('data', (chunk) => responseData += chunk);
                  res.on('end', () => {
                    if (res.statusCode === 200) {
                      console.log('✅ Telegram message sent successfully');
                      resolve(responseData);
                    } else {
                      console.error(`❌ Telegram error: ${res.statusCode} - ${responseData}`);
                      reject(new Error(`HTTP ${res.statusCode}: ${responseData}`));
                    }
                  });
                });
                
                req.on('error', (error) => {
                  console.error('❌ Request error:', error.message);
                  reject(error);
                });
                
                req.write(data);
                req.end();
              });
            }
            
            // 🎮 Nintendo Museum Browser Check (Playwright)
            async function checkNintendoWithBrowser() {
              let browser = null;
              try {
                console.log('🚀 Launching browser...');
                browser = await chromium.launch({ headless: true });
                const page = await browser.newPage();
                
                // 🤖 Stealth Mode - Look like real user
                await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
                await page.setExtraHTTPHeaders({
                  'Accept-Language': 'en-US,en;q=0.9',
                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                });
                
                console.log('📡 Navigating to Nintendo Museum...');
                await page.goto('https://museum-tickets.nintendo.com/en/calendar', { 
                  waitUntil: 'networkidle',
                  timeout: 30000 
                });
                
                // ⏳ Wait for calendar to load
                console.log('⏳ Waiting for calendar...');
                await page.waitForTimeout(3000);
                
                // 🔍 Extract calendar data from page
                const calendarData = await page.evaluate(() => {
                  // Try to find calendar data in various locations
                  const results = {
                    found: false,
                    method: null,
                    data: null,
                    apiData: null
                  };
                  
                  // Method 1: Check for window.__NUXT__ or similar
                  if (window.__NUXT__ && window.__NUXT__.data && window.__NUXT__.data[0]) {
                    results.found = true;
                    results.method = 'NUXT_DATA';
                    results.data = window.__NUXT__.data[0];
                    return results;
                  }
                  
                  // Method 2: Try to intercept fetch calls or check for cached data
                  const scripts = document.querySelectorAll('script');
                  for (let script of scripts) {
                    if (script.textContent && script.textContent.includes('calendar') && script.textContent.includes('2025-09')) {
                      try {
                        // Extract JSON data from script
                        const match = script.textContent.match(/calendar["\s]*:[^}]+}/);
                        if (match) {
                          results.found = true;
                          results.method = 'SCRIPT_EXTRACT';
                          results.data = match[0];
                          return results;
                        }
                      } catch (e) {
                        console.log('Script parsing failed:', e.message);
                      }
                    }
                  }
                  
                  // Method 3: DOM analysis (fallback)
                  const septemberDates = {};
                  const cells = document.querySelectorAll('[role="gridcell"]');
                  
                  cells.forEach(cell => {
                    const ariaLabel = cell.getAttribute('aria-label') || '';
                    if (ariaLabel.includes('September') && ariaLabel.includes('2025')) {
                      const dayMatch = ariaLabel.match(/September (\d+), 2025/);
                      if (dayMatch) {
                        const day = dayMatch[1].padStart(2, '0');
                        const dateKey = `2025-09-${day}`;
                        
                        // Analyze visual state
                        const styles = window.getComputedStyle(cell);
                        const cursor = styles.cursor;
                        const disabled = cell.hasAttribute('disabled') || cell.getAttribute('aria-disabled') === 'true';
                        const classes = cell.className;
                        
                        septemberDates[dateKey] = {
                          day: day,
                          cursor: cursor,
                          disabled: disabled,
                          classes: classes,
                          ariaLabel: ariaLabel,
                          // Estimate status based on DOM
                          estimated_sale_status: cursor === 'pointer' && !disabled ? 1 : 2,
                          estimated_open_status: disabled ? 2 : 1
                        };
                      }
                    }
                  });
                  
                  if (Object.keys(septemberDates).length > 0) {
                    results.found = true;
                    results.method = 'DOM_ANALYSIS';
                    results.data = { calendar: septemberDates };
                  }
                  
                  return results;
                });
                
                console.log(`📊 Calendar data extraction: ${calendarData.found ? 'SUCCESS' : 'FAILED'}`);
                console.log(`🔧 Method used: ${calendarData.method}`);
                
                if (!calendarData.found) {
                  throw new Error('No calendar data found on page');
                }
                
                return calendarData.data;
                
              } finally {
                if (browser) {
                  await browser.close();
                  console.log('🔒 Browser closed');
                }
              }
            }
            
            // 🚀 Main Execution
            try {
              console.log('🎮 Starting Nintendo Museum Browser monitoring...');
              
              const calendarData = await checkNintendoWithBrowser();
              console.log('📡 Calendar data retrieved');
              
              if (!calendarData || !calendarData.calendar) {
                throw new Error('Invalid calendar data structure');
              }
              
              // 📅 September 2025 Analysis
              const calendar = calendarData.calendar;
              const availableDates = [];
              const soldOutDates = [];
              const closedDates = [];
              
              // 🔍 Analyze each September date
              for (const [dateStr, dayData] of Object.entries(calendar)) {
                if (!dateStr.startsWith('2025-09-')) continue;
                
                const day = dateStr.split('-')[2];
                
                // Handle both API format and DOM format
                let isAvailable = false;
                let isClosed = false;
                
                if (dayData.sale_status !== undefined) {
                  // API format (from your analysis)
                  isAvailable = dayData.sale_status === 1 && dayData.open_status === 1;
                  isClosed = dayData.open_status === 2;
                } else {
                  // DOM format (estimated)
                  isAvailable = dayData.estimated_sale_status === 1 && dayData.estimated_open_status === 1;
                  isClosed = dayData.estimated_open_status === 2;
                }
                
                const status = {
                  date: dateStr,
                  day: day,
                  data: dayData
                };
                
                if (isAvailable) {
                  availableDates.push(status);
                } else if (isClosed) {
                  closedDates.push(status);
                } else {
                  soldOutDates.push(status);
                }
              }
              
              // 📊 Generate Report
              const now = new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'});
              let message = `🎮 <b>Nintendo Museum Update</b>\n`;
              message += `⏰ ${now}\n\n`;
              
              // 🚨 AVAILABLE TICKETS (Priority Alert!)
              if (availableDates.length > 0) {
                message += `🚨 <b>VERFÜGBARE TICKETS GEFUNDEN!</b> 🚨\n`;
                for (const date of availableDates) {
                  message += `🎟️ <b>${date.day}.09.2025</b> - JETZT BUCHEN!\n`;
                }
                message += `\n🔗 <a href="https://museum-tickets.nintendo.com/en/calendar">Direkt zur Buchung</a>\n\n`;
              }
              
              // 📈 Summary Stats
              message += `📊 <b>September 2025 Übersicht:</b>\n`;
              message += `🎟️ Verfügbar: <b>${availableDates.length}</b>\n`;
              message += `❌ Ausverkauft: <b>${soldOutDates.length}</b>\n`;
              message += `🔒 Geschlossen: <b>${closedDates.length}</b>\n\n`;
              
              // 🎯 Target Dates Status (20-22 Sept)
              const targetDates = ['20', '21', '22'];
              message += `🎯 <b>Deine Ziel-Termine:</b>\n`;
              
              for (const targetDay of targetDates) {
                const targetDate = availableDates.find(d => d.day === targetDay) ||
                                  soldOutDates.find(d => d.day === targetDay) ||
                                  closedDates.find(d => d.day === targetDay);
                
                if (targetDate) {
                  if (availableDates.includes(targetDate)) {
                    message += `🎟️ ${targetDay}.09: <b>VERFÜGBAR!</b>\n`;
                  } else if (closedDates.includes(targetDate)) {
                    message += `🔒 ${targetDay}.09: Geschlossen\n`;
                  } else {
                    message += `❌ ${targetDay}.09: Ausverkauft\n`;
                  }
                } else {
                  message += `❓ ${targetDay}.09: Daten nicht gefunden\n`;
                }
              }
              
              // 📡 Send Telegram Message
              console.log('📤 Sending Telegram update...');
              await sendTelegramMessage(message);
              console.log('✅ Monitoring completed successfully');
              
            } catch (error) {
              console.error('💥 Monitoring error:', error.message);
              
              // 🚨 Send error notification
              const errorMessage = `❌ <b>Nintendo Museum Monitor Fehler</b>\n⏰ ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}\n\n🔧 ${error.message}\n\n💡 System versucht Browser-Methode...`;
              
              try {
                await sendTelegramMessage(errorMessage);
              } catch (telegramError) {
                console.error('💥 Failed to send error notification:', telegramError.message);
              }
            }
