name: Nintendo Museum Ticket Monitor 🎮

on:
  schedule:
    - cron: '*/10 6-22 * * *'  # 🔥 ALLE 10 MINUTEN zwischen 8:00-00:00 Berlin Zeit
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write

jobs:
  monitor-nintendo-tickets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Playwright
        run: |
          npm install playwright
          npx playwright install chromium

      - name: Monitor Nintendo Museum Tickets
        uses: actions/github-script@v7
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const { chromium } = require('playwright');
            
            async function sendTelegramMessage(message) {
              try {
                if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
                  console.log('⚠️ Telegram credentials missing - console output only');
                  console.log(message);
                  return;
                }
                
                const fetch = (await import('node-fetch')).default;
                await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: process.env.TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                  })
                });
                
                console.log('✅ Telegram message sent');
              } catch (error) {
                console.error('❌ Telegram error:', error.message);
                console.log('📝 Message (fallback):', message);
              }
            }

            async function checkNintendoMuseum() {
              const browser = await chromium.launch({ headless: true });
              const page = await browser.newPage();
              
              try {
                console.log('🎮 Loading Nintendo Museum calendar...');
                await page.goto('https://museum-tickets.nintendo.com/en/calendar', {
                  waitUntil: 'networkidle',
                  timeout: 30000
                });
                
                // Wait for calendar to load
                await page.waitForSelector('gridcell', { timeout: 15000 });
                
                console.log('🔍 Analyzing September calendar data...');
                
                const septemberData = await page.evaluate(() => {
                  const results = {};
                  const today = new Date();
                  const currentYear = today.getFullYear();
                  const targetYear = today.getMonth() >= 8 ? currentYear + 1 : currentYear;
                  
                  // Find all September calendar cells
                  const cells = document.querySelectorAll('gridcell');
                  
                  cells.forEach(cell => {
                    const dateText = cell.textContent?.trim();
                    const ariaLabel = cell.getAttribute('aria-label') || '';
                    
                    // Check if this is a September date
                    if (ariaLabel.includes('September 2025') || 
                        (ariaLabel.includes('September') && ariaLabel.includes(targetYear.toString()))) {
                      
                      const dayNum = dateText;
                      const hasOff = cell.innerHTML.includes('"off"');
                      const hasPointer = cell.getAttribute('style')?.includes('pointer') || 
                                       window.getComputedStyle(cell).cursor === 'pointer';
                      const isClickable = hasPointer && !hasOff;
                      
                      if (dayNum && !isNaN(dayNum) && dayNum <= 31) {
                        const formattedDate = `${dayNum.padStart(2, '0')}.09`;
                        
                        let status;
                        if (hasOff) {
                          status = '🔒 Museum geschlossen';
                        } else if (isClickable) {
                          status = '🎟️ VERFÜGBAR - JETZT SCHNELL!';
                        } else {
                          status = '❌ Ausverkauft';
                        }
                        
                        results[formattedDate] = {
                          day: dayNum,
                          status: status,
                          available: isClickable,
                          closed: hasOff
                        };
                      }
                    }
                  });
                  
                  return results;
                });
                
                console.log('📊 September analysis complete:', Object.keys(septemberData).length, 'days found');
                
                if (Object.keys(septemberData).length === 0) {
                  await sendTelegramMessage('⚠️ <b>Nintendo Museum Monitor</b>\n\nKeine September-Daten gefunden. Kalender möglicherweise noch nicht freigegeben.\n\n🔗 <a href="https://museum-tickets.nintendo.com/en/calendar">Manuelle Prüfung</a>');
                  return;
                }
                
                // Build status message
                let message = '🎮 <b>Nintendo Museum Status Update</b>\n';
                message += '📅 September 2025\n';
                message += '⚡ <i>Monitoring alle 10 Minuten</i>\n\n';
                
                let availableCount = 0;
                let availableDates = [];
                
                // Sort dates and build message
                const sortedDates = Object.keys(septemberData).sort();
                
                sortedDates.forEach(date => {
                  const data = septemberData[date];
                  const emoji = data.available ? '🎟️' : (data.closed ? '🔒' : '❌');
                  message += `${emoji} <b>${date}</b> = ${data.status}\n`;
                  
                  if (data.available) {
                    availableCount++;
                    availableDates.push(date);
                  }
                });
                
                message += `\n📊 <b>Zusammenfassung:</b>\n`;
                message += `✅ Verfügbare Termine: ${availableCount}\n`;
                
                if (availableCount > 0) {
                  message += `🚨 <b>SOFORT BUCHEN:</b> ${availableDates.join(', ')}\n`;
                  message += `🏃‍♂️ <b>Tickets können schnell weg sein!</b>\n`;
                }
                
                message += `\n🔗 <a href="https://museum-tickets.nintendo.com/en/calendar">Zur Buchungsseite</a>`;
                message += `\n⏰ Letzte Prüfung: ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}`;
                message += `\n⚡ Nächste Prüfung: in 10 Minuten`;
                
                // Only send message if tickets are available OR every hour for status update
                const currentMinute = new Date().getMinutes();
                const shouldSendStatusUpdate = currentMinute % 60 === 0; // Every hour on the hour
                
                if (availableCount > 0 || shouldSendStatusUpdate) {
                  await sendTelegramMessage(message);
                } else {
                  console.log('🔕 No available tickets, skipping notification (hourly status updates only)');
                }
                
                // Create GitHub issue if tickets are available
                if (availableCount > 0) {
                  const issueTitle = `🚨 Nintendo Museum Tickets verfügbar! (${availableDates.join(', ')})`;
                  const issueBody = `**🚨 SOFORT HANDELN! 🚨**\n\n${message.replace(/<[^>]*>/g, '')}\n\n**Verfügbare Termine:** ${availableDates.join(', ')}\n\n[JETZT BUCHEN!](https://museum-tickets.nintendo.com/en/calendar)\n\n---\n**Monitoring-Frequenz:** Alle 10 Minuten\n**Alert-Zeit:** ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}`;
                  
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: issueTitle,
                    body: issueBody,
                    labels: ['🎯 ticket-alert', '🎮 nintendo-museum', '🚨 urgent', '⚡ 10min-monitoring']
                  });
                  
                  console.log('🎯 GitHub issue created for available tickets');
                }
                
              } catch (error) {
                console.error('💥 Error during monitoring:', error);
                const errorMsg = `❌ <b>Nintendo Museum Monitor Fehler</b>\n\n${error.message}\n\n⏰ Nächste Prüfung in 10 Minuten`;
                await sendTelegramMessage(errorMsg);
                throw error;
              } finally {
                await browser.close();
              }
            }
            
            await checkNintendoMuseum();

      - name: Install node-fetch
        run: npm install node-fetch
        if: always()
