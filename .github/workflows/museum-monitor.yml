name: Nintendo Museum Ticket Monitor 🎮

on:
  schedule:
    - cron: '*/10 6-22 * * *'  # Alle 10 Minuten zwischen 8:00-00:00 Berlin Zeit
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write

jobs:
  monitor-nintendo-tickets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm install playwright node-fetch
          npx playwright install chromium

      - name: Monitor Nintendo Museum Tickets
        uses: actions/github-script@v7
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const { chromium } = require('playwright');
            
            async function sendTelegramMessage(message) {
              try {
                console.log('📤 Sending Telegram message...');
                
                const fetch = (await import('node-fetch')).default;
                const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: process.env.TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                  })
                });
                
                if (response.ok) {
                  console.log('✅ Telegram message sent successfully!');
                  return true;
                } else {
                  const errorText = await response.text();
                  console.error('❌ Telegram API error:', errorText);
                  return false;
                }
              } catch (error) {
                console.error('❌ Error sending message:', error.message);
                return false;
              }
            }

            async function checkNintendoMuseum() {
              let browser;
              let statusMessage = '';
              
              try {
                console.log('🚀 Starting Nintendo Museum monitoring...');
                
                browser = await chromium.launch({ 
                  headless: true,
                  args: ['--no-sandbox', '--disable-setuid-sandbox']
                });
                
                const page = await browser.newPage();
                page.setDefaultTimeout(45000);
                await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
                
                console.log('🎮 Loading Nintendo Museum calendar...');
                await page.goto('https://museum-tickets.nintendo.com/en/calendar', {
                  waitUntil: 'domcontentloaded',
                  timeout: 45000
                });
                
                // Wait for dynamic content
                await page.waitForTimeout(5000);
                
                console.log('🔍 Analyzing September calendar data...');
                
                // Try to find calendar elements
                let calendarFound = false;
                const selectors = [
                  'gridcell',
                  '[role="gridcell"]', 
                  'table td',
                  '.calendar-day',
                  '.day'
                ];
                
                for (const selector of selectors) {
                  try {
                    await page.waitForSelector(selector, { timeout: 5000 });
                    console.log(`✅ Found calendar elements: ${selector}`);
                    calendarFound = true;
                    break;
                  } catch (e) {
                    console.log(`❌ Selector failed: ${selector}`);
                  }
                }
                
                const septemberData = await page.evaluate(() => {
                  const results = {};
                  const today = new Date();
                  const currentYear = today.getFullYear();
                  const targetYear = today.getMonth() >= 8 ? currentYear + 1 : currentYear;
                  
                  // Find all possible calendar cells
                  const allSelectors = [
                    'gridcell',
                    '[role="gridcell"]',
                    'table td',
                    '.calendar-day',
                    '.day',
                    'div[aria-label*="September"]'
                  ];
                  
                  let foundCells = [];
                  allSelectors.forEach(sel => {
                    const cells = document.querySelectorAll(sel);
                    if (cells.length > 0 && foundCells.length === 0) {
                      foundCells = Array.from(cells);
                      console.log(`Using ${cells.length} cells from selector: ${sel}`);
                    }
                  });
                  
                  foundCells.forEach(cell => {
                    const dateText = cell.textContent?.trim();
                    const ariaLabel = cell.getAttribute('aria-label') || '';
                    const innerHTML = cell.innerHTML || '';
                    
                    // Check if this is a September date
                    const isSeptemberCell = ariaLabel.includes('September 2025') || 
                                          ariaLabel.includes(`September ${targetYear}`) ||
                                          (ariaLabel.includes('September') && cell.closest('[data-month="9"]'));
                    
                    // Or if it's a number that could be a September date
                    const isDateNumber = dateText && !isNaN(dateText) && 
                                        parseInt(dateText) >= 1 && parseInt(dateText) <= 31;
                    
                    if (isSeptemberCell || (isDateNumber && foundCells.indexOf(cell) < 50)) {
                      const dayNum = dateText;
                      
                      // Check if day is closed/off
                      const hasOff = innerHTML.includes('"off"') || 
                                   innerHTML.includes('closed') ||
                                   innerHTML.includes('off') ||
                                   cell.classList.contains('off') ||
                                   cell.classList.contains('closed');
                      
                      // Check if clickable/available
                      const styles = window.getComputedStyle(cell);
                      const hasPointer = styles.cursor === 'pointer' ||
                                       cell.hasAttribute('onclick') ||
                                       cell.querySelector('a') ||
                                       cell.getAttribute('data-clickable') === 'true';
                      
                      const isClickable = hasPointer && !hasOff;
                      
                      if (dayNum && !isNaN(dayNum) && dayNum >= 1 && dayNum <= 31) {
                        const formattedDate = `${dayNum.padStart(2, '0')}.09`;
                        
                        let status;
                        if (hasOff) {
                          status = '🔒 Museum geschlossen';
                        } else if (isClickable) {
                          status = '🎟️ VERFÜGBAR - JETZT SCHNELL!';
                        } else {
                          status = '❌ Ausverkauft';
                        }
                        
                        results[formattedDate] = {
                          day: dayNum,
                          status: status,
                          available: isClickable,
                          closed: hasOff
                        };
                      }
                    }
                  });
                  
                  return results;
                });
                
                console.log('📊 Found September dates:', Object.keys(septemberData).length);
                
                // Build status message - ALWAYS send
                statusMessage = '🎮 <b>Nintendo Museum Status Update</b>\n';
                statusMessage += '📅 September 2025\n';
                statusMessage += '⚡ <i>Live-Monitoring alle 10 Minuten</i>\n\n';
                
                let availableCount = 0;
                let availableDates = [];
                let closedCount = 0;
                let soldOutCount = 0;
                
                if (Object.keys(septemberData).length > 0) {
                  // Sort dates and build detailed status
                  const sortedDates = Object.keys(septemberData).sort();
                  
                  sortedDates.forEach(date => {
                    const data = septemberData[date];
                    const emoji = data.available ? '🎟️' : (data.closed ? '🔒' : '❌');
                    statusMessage += `${emoji} <b>${date}</b> = ${data.status}\n`;
                    
                    if (data.available) {
                      availableCount++;
                      availableDates.push(date);
                    } else if (data.closed) {
                      closedCount++;
                    } else {
                      soldOutCount++;
                    }
                  });
                  
                  statusMessage += `\n📊 <b>Zusammenfassung:</b>\n`;
                  statusMessage += `🎟️ Verfügbar: ${availableCount}\n`;
                  statusMessage += `❌ Ausverkauft: ${soldOutCount}\n`;
                  statusMessage += `🔒 Geschlossen: ${closedCount}\n`;
                  
                } else {
                  statusMessage += '⚠️ <i>September-Kalender noch nicht verfügbar oder Parsing fehlgeschlagen</i>\n';
                  statusMessage += '🔧 <i>Monitoring läuft weiter...</i>\n';
                }
                
                if (availableCount > 0) {
                  statusMessage += `\n🚨 <b>SOFORT BUCHEN:</b> ${availableDates.join(', ')}\n`;
                  statusMessage += `🏃‍♂️ <b>Tickets können schnell weg sein!</b>\n`;
                }
                
                statusMessage += `\n🔗 <a href="https://museum-tickets.nintendo.com/en/calendar">Zur Buchungsseite</a>`;
                statusMessage += `\n⏰ ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}`;
                statusMessage += `\n⚡ Nächste Prüfung: in 10 Minuten`;
                
                // ALWAYS send message (every 10 minutes)
                console.log('📤 Sending status update...');
                const messageSent = await sendTelegramMessage(statusMessage);
                
                if (!messageSent) {
                  console.error('❌ Failed to send Telegram message');
                }
                
                // Create GitHub issue only if tickets are available
                if (availableCount > 0) {
                  console.log('🎯 Creating GitHub issue for available tickets...');
                  
                  const issueTitle = `🚨 Nintendo Museum Tickets verfügbar! (${availableDates.join(', ')})`;
                  const issueBody = `**🚨 SOFORT HANDELN! 🚨**\n\n${statusMessage.replace(/<[^>]*>/g, '')}\n\n**Verfügbare Termine:** ${availableDates.join(', ')}\n\n[JETZT BUCHEN!](https://museum-tickets.nintendo.com/en/calendar)\n\n---\n⚡ **Live-Monitoring aktiv** - alle 10 Minuten\n📱 **Telegram-Alerts** - sofortige Benachrichtigung`;
                  
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: issueTitle,
                    body: issueBody,
                    labels: ['🎯 ticket-alert', '🎮 nintendo-museum', '🚨 urgent', '⚡ live-monitoring']
                  });
                  
                  console.log('✅ GitHub issue created successfully');
                }
                
              } catch (error) {
                console.error('💥 Error during monitoring:', error);
                
                const errorMessage = `❌ <b>Nintendo Museum Monitor Fehler</b>\n\n<code>${error.message}</code>\n\n⏰ ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}\n🔧 Nächste Prüfung in 10 Minuten\n\n<i>Monitor läuft weiter...</i>`;
                
                await sendTelegramMessage(errorMessage);
              } finally {
                if (browser) {
                  await browser.close();
                  console.log('🔒 Browser closed');
                }
              }
            }
            
            await checkNintendoMuseum();
