name: Nintendo Museum Ticket Monitor 🎮

on:
  schedule:
    - cron: '*/10 6-22 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  monitor-nintendo-tickets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Monitor Nintendo Museum Tickets
        uses: actions/github-script@v7
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const https = require('https');
            
            // 📡 Telegram Message Function
            async function sendTelegramMessage(message) {
              return new Promise((resolve, reject) => {
                const data = JSON.stringify({
                  chat_id: process.env.TELEGRAM_CHAT_ID,
                  text: message,
                  parse_mode: 'HTML'
                });
                
                const options = {
                  hostname: 'api.telegram.org',
                  port: 443,
                  path: `/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': data.length
                  }
                };
                
                const req = https.request(options, (res) => {
                  let responseData = '';
                  res.on('data', (chunk) => responseData += chunk);
                  res.on('end', () => {
                    if (res.statusCode === 200) {
                      console.log('✅ Telegram message sent successfully');
                      resolve(responseData);
                    } else {
                      console.error(`❌ Telegram error: ${res.statusCode} - ${responseData}`);
                      reject(new Error(`HTTP ${res.statusCode}: ${responseData}`));
                    }
                  });
                });
                
                req.on('error', (error) => {
                  console.error('❌ Request error:', error.message);
                  reject(error);
                });
                
                req.write(data);
                req.end();
              });
            }
            
            // 🎮 Nintendo Museum Check (Simple HTTP)
            async function checkNintendoMuseum() {
              return new Promise((resolve, reject) => {
                const options = {
                  hostname: 'museum-tickets.nintendo.com',
                  port: 443,
                  path: '/en/calendar',
                  method: 'GET',
                  headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'DNT': '1',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                  }
                };
                
                const req = https.request(options, (res) => {
                  let data = '';
                  res.on('data', (chunk) => data += chunk);
                  res.on('end', () => {
                    resolve(data.toString());
                  });
                });
                
                req.on('error', (error) => {
                  reject(new Error(`Request Error: ${error.message}`));
                });
                
                req.setTimeout(15000, () => {
                  req.destroy();
                  reject(new Error('Request timeout'));
                });
                
                req.end();
              });
            }
            
            // 🚀 Main Execution
            try {
              console.log('🎮 Starting Nintendo Museum monitoring...');
              
              const htmlContent = await checkNintendoMuseum();
              console.log('📡 Website content retrieved');
              
              // 📅 Analyze September dates (simple pattern matching)
              const septemberDates = [];
              
              // Generate all September dates
              for (let day = 1; day <= 30; day++) {
                const dayStr = day.toString().padStart(2, '0');
                const dateKey = `${dayStr}.09`;
                
                let status = '❌ Ausverkauft'; // Default
                let emoji = '❌';
                
                // Simple heuristics based on known patterns
                if ([2, 9, 16, 23, 30].includes(day)) {
                  // Mondays - Museum closed
                  status = '🔒 Museum geschlossen';
                  emoji = '🔒';
                }
                
                // Check for availability indicators in HTML (basic)
                const availablePattern = new RegExp(`september[^>]*${day}[^>]*available|${day}[^>]*september[^>]*available`, 'i');
                const soldOutPattern = new RegExp(`september[^>]*${day}[^>]*sold.out|${day}[^>]*september[^>]*sold.out`, 'i');
                const cursorPointerPattern = new RegExp(`cursor[^>]*pointer[^>]*september[^>]*${day}|september[^>]*${day}[^>]*cursor[^>]*pointer`, 'i');
                
                // More sophisticated check for your known available pattern
                if (htmlContent.includes(`"2025-09-${dayStr}"`)) {
                  // Look for the specific data structure you found
                  const dateMatch = htmlContent.match(new RegExp(`"2025-09-${dayStr}"[^}]*sale_status[^}]*([12])[^}]*open_status[^}]*([12])`, 'i'));
                  if (dateMatch) {
                    const saleStatus = parseInt(dateMatch[1]);
                    const openStatus = parseInt(dateMatch[2]);
                    
                    if (saleStatus === 1 && openStatus === 1) {
                      status = '🎟️ VERFÜGBAR!';
                      emoji = '🎟️';
                    } else if (openStatus === 2) {
                      status = '🔒 Museum geschlossen';
                      emoji = '🔒';
                    } else {
                      status = '❌ Ausverkauft';
                      emoji = '❌';
                    }
                  }
                }
                
                septemberDates.push({
                  date: dateKey,
                  day: day,
                  status: status,
                  emoji: emoji,
                  available: emoji === '🎟️'
                });
              }
              
              // 📊 Count statistics
              const available = septemberDates.filter(d => d.available).length;
              const soldOut = septemberDates.filter(d => d.emoji === '❌').length;
              const closed = septemberDates.filter(d => d.emoji === '🔒').length;
              
              // 📱 Generate Telegram Message (Your beautiful format!)
              const now = new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'});
              let message = `🎮 <b>Nintendo Museum Status Update</b>\n`;
              message += `📅 <b>September 2025</b>\n`;
              message += `⚡ <i>Live-Monitoring alle 10 Minuten</i>\n\n`;
              
              // 🚨 Priority: Available tickets alert
              const availableTickets = septemberDates.filter(d => d.available);
              if (availableTickets.length > 0) {
                message += `🚨 <b>VERFÜGBARE TICKETS GEFUNDEN!</b> 🚨\n`;
                for (const ticket of availableTickets) {
                  message += `🎟️ <b>${ticket.date}</b> - JETZT BUCHEN!\n`;
                }
                message += `\n`;
              }
              
              // 📋 Full calendar overview
              for (const dateInfo of septemberDates) {
                message += `${dateInfo.emoji} ${dateInfo.date} = ${dateInfo.status}\n`;
              }
              
              // 📊 Summary
              message += `\n📊 <b>Zusammenfassung:</b>\n`;
              message += `🎟️ Verfügbar: <b>${available}</b>\n`;
              message += `❌ Ausverkauft: <b>${soldOut}</b>\n`;
              message += `🔒 Geschlossen: <b>${closed}</b>\n\n`;
              
              message += `🔗 <a href="https://museum-tickets.nintendo.com/en/calendar">Zur Buchungsseite</a>\n\n`;
              message += `⏰ ${now}\n`;
              message += `⚡ <i>Nächste Prüfung: in 10 Minuten</i>`;
              
              // 📡 Send Telegram Message
              console.log('📤 Sending status update...');
              await sendTelegramMessage(message);
              console.log('✅ Monitoring completed successfully');
              
            } catch (error) {
              console.error('💥 Monitoring error:', error.message);
              
              // 🚨 Send error notification
              const errorMessage = `❌ <b>Nintendo Museum Monitor Fehler</b>\n⏰ ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}\n\n🔧 ${error.message}\n\n💡 System wird beim nächsten Lauf erneut versuchen...`;
              
              try {
                await sendTelegramMessage(errorMessage);
              } catch (telegramError) {
                console.error('💥 Failed to send error notification:', telegramError.message);
              }
            }
