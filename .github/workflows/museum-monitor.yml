name: Nintendo Museum Ticket Monitor 🎮

on:
  schedule:
    - cron: '*/10 6-22 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  monitor-nintendo-tickets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Monitor Nintendo Museum Tickets
        uses: actions/github-script@v7
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const https = require('https');
            
            // 📡 Telegram Message Function
            async function sendTelegramMessage(message) {
              return new Promise((resolve, reject) => {
                const data = JSON.stringify({
                  chat_id: process.env.TELEGRAM_CHAT_ID,
                  text: message,
                  parse_mode: 'HTML'
                });
                
                const options = {
                  hostname: 'api.telegram.org',
                  port: 443,
                  path: `/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': data.length
                  }
                };
                
                const req = https.request(options, (res) => {
                  let responseData = '';
                  res.on('data', (chunk) => responseData += chunk);
                  res.on('end', () => {
                    if (res.statusCode === 200) {
                      console.log('✅ Telegram message sent successfully');
                      resolve(responseData);
                    } else {
                      console.error(`❌ Telegram error: ${res.statusCode} - ${responseData}`);
                      reject(new Error(`HTTP ${res.statusCode}: ${responseData}`));
                    }
                  });
                });
                
                req.on('error', (error) => {
                  console.error('❌ Request error:', error.message);
                  reject(error);
                });
                
                req.write(data);
                req.end();
              });
            }
            
            // 🎮 Nintendo Museum API Check
            async function checkNintendoAPI() {
              return new Promise((resolve, reject) => {
                const options = {
                  hostname: 'museum-tickets.nintendo.com',
                  port: 443,
                  path: '/en/api/calendar?target_year=2025&target_month=9',
                  method: 'GET',
                  headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Accept': 'application/json',
                    'Referer': 'https://museum-tickets.nintendo.com/en/calendar'
                  }
                };
                
                const req = https.request(options, (res) => {
                  let data = '';
                  res.on('data', (chunk) => data += chunk);
                  res.on('end', () => {
                    try {
                      const jsonData = JSON.parse(data);
                      resolve(jsonData);
                    } catch (error) {
                      reject(new Error(`JSON Parse Error: ${error.message}`));
                    }
                  });
                });
                
                req.on('error', (error) => {
                  reject(new Error(`Request Error: ${error.message}`));
                });
                
                req.setTimeout(10000, () => {
                  req.destroy();
                  reject(new Error('Request timeout'));
                });
                
                req.end();
              });
            }
            
            // 🚀 Main Execution
            try {
              console.log('🎮 Starting Nintendo Museum API monitoring...');
              
              const apiData = await checkNintendoAPI();
              console.log('📡 API Response received');
              
              if (!apiData.data || !apiData.data.calendar) {
                throw new Error('Invalid API response structure');
              }
              
              // 📅 September 2025 Analysis
              const calendar = apiData.data.calendar;
              const availableDates = [];
              const soldOutDates = [];
              const closedDates = [];
              
              // 🔍 Analyze each September date
              for (const [dateStr, dayData] of Object.entries(calendar)) {
                if (!dateStr.startsWith('2025-09-')) continue;
                
                const day = dateStr.split('-')[2];
                const status = {
                  date: dateStr,
                  day: day,
                  sale_status: dayData.sale_status,
                  open_status: dayData.open_status,
                  holiday: dayData.holiday
                };
                
                // 🎯 Classification based on your analysis
                if (dayData.sale_status === 1 && dayData.open_status === 1) {
                  // AVAILABLE TICKETS! 🎟️
                  availableDates.push(status);
                } else if (dayData.sale_status === 2 && dayData.open_status === 1) {
                  // Sold out but museum open ❌
                  soldOutDates.push(status);
                } else if (dayData.open_status === 2) {
                  // Museum closed 🔒  
                  closedDates.push(status);
                }
              }
              
              // 📊 Generate Report
              const now = new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'});
              let message = `🎮 <b>Nintendo Museum Update</b>\n`;
              message += `⏰ ${now}\n\n`;
              
              // 🚨 AVAILABLE TICKETS (Priority Alert!)
              if (availableDates.length > 0) {
                message += `🚨 <b>VERFÜGBARE TICKETS GEFUNDEN!</b> 🚨\n`;
                for (const date of availableDates) {
                  message += `🎟️ <b>${date.day}.09.2025</b> - JETZT BUCHEN!\n`;
                }
                message += `\n🔗 <a href="https://museum-tickets.nintendo.com/en/calendar">Direkt zur Buchung</a>\n\n`;
              }
              
              // 📈 Summary Stats
              message += `📊 <b>September 2025 Übersicht:</b>\n`;
              message += `🎟️ Verfügbar: <b>${availableDates.length}</b>\n`;
              message += `❌ Ausverkauft: <b>${soldOutDates.length}</b>\n`;
              message += `🔒 Geschlossen: <b>${closedDates.length}</b>\n\n`;
              
              // 🎯 Target Dates Status (20-22 Sept)
              const targetDates = ['20', '21', '22'];
              message += `🎯 <b>Deine Ziel-Termine:</b>\n`;
              
              for (const targetDay of targetDates) {
                const dayData = calendar[`2025-09-${targetDay}`];
                if (dayData) {
                  if (dayData.sale_status === 1 && dayData.open_status === 1) {
                    message += `🎟️ ${targetDay}.09: <b>VERFÜGBAR!</b>\n`;
                  } else if (dayData.sale_status === 2) {
                    message += `❌ ${targetDay}.09: Ausverkauft\n`;
                  } else {
                    message += `🔒 ${targetDay}.09: Geschlossen\n`;
                  }
                }
              }
              
              // 📡 Send Telegram Message
              console.log('📤 Sending Telegram update...');
              await sendTelegramMessage(message);
              console.log('✅ Monitoring completed successfully');
              
            } catch (error) {
              console.error('💥 Monitoring error:', error.message);
              
              // 🚨 Send error notification
              const errorMessage = `❌ <b>Nintendo Museum Monitor Fehler</b>\n⏰ ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}\n\n🔧 ${error.message}`;
              
              try {
                await sendTelegramMessage(errorMessage);
              } catch (telegramError) {
                console.error('💥 Failed to send error notification:', telegramError.message);
              }
            }
