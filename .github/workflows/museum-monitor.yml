name: Museum Slot Monitor

on:
  schedule:
    - cron: '*/15 5-21 * * *'  # Alle 15 min zwischen 7:30-23:30 Berliner Zeit (UTC+2)
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write

jobs:
  check-museum-slots:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install axios

      - name: Check for slots
        uses: actions/github-script@v6
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const axios = require('axios');
            
            async function sendTelegramMessage(message) {
              try {
                if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
                  throw new Error('Telegram Credentials fehlen! Bitte TELEGRAM_BOT_TOKEN und TELEGRAM_CHAT_ID in den Repository Secrets konfigurieren.');
                }
                
                const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
                console.log('Sende Telegram-Nachricht...');
                
                const response = await axios.post(telegramUrl, {
                  chat_id: process.env.TELEGRAM_CHAT_ID,
                  text: message,
                  parse_mode: 'HTML'
                });
                
                console.log('Telegram-Nachricht erfolgreich gesendet');
                return response.data;
              } catch (error) {
                console.error('Detaillierter Telegram-Fehler:', {
                  message: error.message,
                  response: error.response ? {
                    status: error.response.status,
                    statusText: error.response.statusText,
                    data: error.response.data
                  } : 'Keine Response-Daten',
                  request: {
                    url: telegramUrl,
                    chatId: process.env.TELEGRAM_CHAT_ID ? 'Vorhanden' : 'Fehlt',
                    token: process.env.TELEGRAM_BOT_TOKEN ? 'Vorhanden' : 'Fehlt'
                  }
                });
                throw new Error(`Telegram-Fehler: ${error.message}`);
              }
            }

            function formatDate(dateStr) {
              try {
                const date = new Date(dateStr);
                if (isNaN(date.getTime())) {
                  throw new Error(`Ung√ºltiges Datum: ${dateStr}`);
                }
                return date.toLocaleDateString('de-DE', { day: '2-digit', month: '2-digit' });
              } catch (error) {
                console.error(`Fehler beim Formatieren des Datums ${dateStr}:`, error);
                return dateStr; // Fallback: Original-String zur√ºckgeben
              }
            }

            function getTicketStatus(dayData) {
              try {
                if (!dayData) {
                  throw new Error('Keine Tagesdaten vorhanden');
                }
                
                console.log('Tages-Daten:', {
                  open_status: dayData.open_status,
                  sale_status: dayData.sale_status,
                  holiday: dayData.holiday,
                  day_label: dayData.day_label
                });
                
                if (dayData.open_status === 2) return 'geschlossen';
                if (dayData.sale_status === 1 && dayData.open_status === 1) return 'Tickets kaufbar! üéâ';
                return 'keine Tickets kaufbar';
              } catch (error) {
                console.error('Fehler beim Ermitteln des Ticket-Status:', error);
                return 'Status unbekannt';
              }
            }
            
            async function fetchCalendarData(year, month) {
              try {
                const monthStr = month.toString().padStart(2, '0');
                const url = `https://museum-tickets.nintendo.com/api/calendar/${year}-${monthStr}`;
                console.log(`Versuche Kalenderdaten zu laden f√ºr: ${year}-${monthStr}`);
                
                const response = await axios.get(url, {
                  headers: {
                    'Accept': 'application/json',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                  }
                });
                
                console.log('API Response Status:', response.status);
                console.log('API Response Headers:', response.headers);
                
                if (!response.data || !response.data.data || !response.data.data.calendar) {
                  console.error('Unerwartetes API-Response-Format:', response.data);
                  throw new Error('Ung√ºltiges API-Response-Format');
                }
                
                return response.data.data.calendar;
              } catch (error) {
                console.error('Detaillierter API-Fehler:', {
                  message: error.message,
                  response: error.response ? {
                    status: error.response.status,
                    statusText: error.response.statusText,
                    data: error.response.data
                  } : 'Keine Response-Daten',
                  request: {
                    url: url,
                    year: year,
                    month: month
                  }
                });
                throw new Error(`API-Fehler: ${error.message}`);
              }
            }
            
            async function checkSlots() {
              try {
                const now = new Date();
                const currentYear = now.getFullYear();
                const currentMonth = now.getMonth() + 1;
                const targetYear = currentMonth >= 9 ? currentYear + 1 : currentYear;
                
                console.log('Start der √úberpr√ºfung:', {
                  currentDate: now.toISOString(),
                  targetYear: targetYear,
                  currentMonth: currentMonth
                });
                
                const septemberData = await fetchCalendarData(targetYear, 9);
                
                if (!septemberData || Object.keys(septemberData).length === 0) {
                  console.log('Keine Kalenderdaten gefunden');
                  await sendTelegramMessage(`‚ÑπÔ∏è Keine Daten f√ºr September ${targetYear} verf√ºgbar. Der Kalender wurde noch nicht freigegeben.`);
                  return;
                }
                
                console.log(`Gefundene Tage: ${Object.keys(septemberData).length}`);
                
                let message = `üéÆ Nintendo Museum Status Update\n\n`;
                
                // Sortiere die Tage chronologisch
                const sortedDays = Object.entries(septemberData)
                  .sort(([dateA], [dateB]) => dateA.localeCompare(dateB));
                
                // Erstelle die Statusliste
                let ticketsAvailable = false;
                sortedDays.forEach(([date, dayData]) => {
                  const formattedDate = formatDate(date);
                  const status = getTicketStatus(dayData);
                  message += `${formattedDate}: ${status}\n`;
                  
                  if (dayData.sale_status === 1 && dayData.open_status === 1) {
                    ticketsAvailable = true;
                    console.log(`Tickets verf√ºgbar f√ºr: ${date}`);
                  }
                });
                
                message += `\nüîó Buchungslink: https://museum-tickets.nintendo.com/en/calendar`;
                
                // Sende die Nachricht
                await sendTelegramMessage(message);
                
                // Erstelle Issue wenn Tickets verf√ºgbar
                if (ticketsAvailable) {
                  console.log('Erstelle GitHub Issue f√ºr verf√ºgbare Tickets');
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `üéÆ Tickets f√ºr September ${targetYear} verf√ºgbar!`,
                    body: message
                  });
                }
                
                console.log('√úberpr√ºfung erfolgreich abgeschlossen');
                
              } catch (error) {
                console.error('Detaillierter Fehler beim √úberpr√ºfen der Slots:', {
                  message: error.message,
                  stack: error.stack,
                  date: new Date().toISOString()
                });
                
                const errorMessage = `‚ùå Fehler beim √úberpr√ºfen der Museum-Slots:

Fehler: ${error.message}
Zeit: ${new Date().toISOString()}

Detaillierte Fehlermeldung:
${error.stack || 'Keine Stack-Trace verf√ºgbar'}

Der Bot l√§uft weiter und pr√ºft beim n√§chsten Durchlauf erneut.`;
                
                await sendTelegramMessage(errorMessage);
                core.setFailed(error.message);
              }
            }
            
            await checkSlots();
