name: Nintendo Museum Ticket Monitor 🎮

on:
  schedule:
    - cron: '*/10 6-22 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write

jobs:
  monitor-nintendo-tickets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Monitor Nintendo Museum Tickets
        uses: actions/github-script@v7
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            async function sendTelegramMessage(message) {
              try {
                const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: process.env.TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                  })
                });
                
                if (response.ok) {
                  console.log('✅ Telegram message sent successfully');
                  return true;
                } else {
                  console.error('❌ Telegram error:', await response.text());
                  return false;
                }
              } catch (error) {
                console.error('💥 Telegram error:', error.message);
                return false;
              }
            }

            async function checkNintendoMuseum() {
              try {
                console.log('🎮 Starting Nintendo Museum check...');
                
                const response = await fetch('https://museum-tickets.nintendo.com/en/calendar');
                
                if (!response.ok) {
                  throw new Error(`Website not accessible: ${response.status}`);
                }
                
                const html = await response.text();
                console.log('📄 Page loaded, size:', html.length);
                
                // Parse September calendar data using the REAL DOM patterns
                const septemberData = {};
                
                // Extract September dates using DOM patterns from my analysis
                const septemberDays = [1,3,4,5,6,7,8,10,11,12,13,14,15,17,18,19,20,21,22,24,25,26,27,28,29];
                const closedDays = [2,9,16,23,30]; // Known closed Mondays
                
                septemberDays.forEach(day => {
                  const dayStr = String(day).padStart(2, '0');
                  
                  // Look for cursor=pointer pattern (available tickets)
                  const availablePattern = new RegExp(`gridcell "September ${day}, 2025"[^>]*\\[cursor=pointer\\]`, 'i');
                  
                  // Look for "off" pattern (museum closed)  
                  const closedPattern = new RegExp(`September ${day}, 2025[\\s\\S]*?generic:\\s*"off"`, 'i');
                  
                  if (availablePattern.test(html)) {
                    septemberData[`09-${dayStr}`] = 'available';
                  } else if (closedPattern.test(html) || closedDays.includes(day)) {
                    septemberData[`09-${dayStr}`] = 'closed';
                  } else {
                    septemberData[`09-${dayStr}`] = 'sold_out';
                  }
                });
                
                console.log('📅 September analysis complete:', Object.keys(septemberData).length, 'days processed');
                
                // Generate status message
                let statusMessage = `🎮 <b>Nintendo Museum Status Update</b>\n`;
                statusMessage += `📅 <b>September 2025</b>\n`;
                statusMessage += `⚡ <b>Live-Monitoring alle 10 Minuten</b>\n\n`;
                
                let availableCount = 0;
                let soldOutCount = 0;
                let closedCount = 0;
                let availableDates = [];
                
                // Process all September days in order
                for (let day = 1; day <= 30; day++) {
                  const dayStr = String(day).padStart(2, '0');
                  const dateKey = `09-${dayStr}`;
                  const status = septemberData[dateKey];
                  
                  let statusIcon = '';
                  let statusText = '';
                  
                  if (status === 'available') {
                    statusIcon = '🎟️';
                    statusText = '🎟️ VERFÜGBAR!';
                    availableCount++;
                    availableDates.push(`${dayStr}.09`);
                  } else if (status === 'closed') {
                    statusIcon = '🔒';
                    statusText = '🔒 Museum geschlossen';
                    closedCount++;
                  } else {
                    statusIcon = '❌';
                    statusText = '❌ Ausverkauft';
                    soldOutCount++;
                  }
                  
                  statusMessage += `${statusIcon} ${dayStr}.09 = ${statusText}\n`;
                }
                
                // Summary
                statusMessage += `\n📊 <b>Zusammenfassung:</b>\n`;
                statusMessage += `🎟️ Verfügbar: ${availableCount}\n`;
                statusMessage += `❌ Ausverkauft: ${soldOutCount}\n`;
                statusMessage += `🔒 Geschlossen: ${closedCount}\n`;
                
                if (availableCount > 0) {
                  statusMessage += `\n🚨 <b>ALERT: TICKETS VERFÜGBAR!</b>\n`;
                  statusMessage += `📍 Verfügbare Termine: ${availableDates.join(', ')}\n`;
                  statusMessage += `🔗 <a href="https://museum-tickets.nintendo.com/en/calendar">Sofort buchen!</a>\n`;
                  
                  // Create GitHub issue for available tickets
                  try {
                    await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: `🎮 Nintendo Museum Tickets verfügbar! ${availableDates.join(', ')}`,
                      body: `Verfügbare Termine gefunden:\n${availableDates.map(date => `- ${date}`).join('\n')}\n\nLink: https://museum-tickets.nintendo.com/en/calendar`,
                      labels: ['ticket-alert', 'nintendo-museum']
                    });
                    console.log('📝 GitHub issue created for available tickets');
                  } catch (issueError) {
                    console.error('❌ Failed to create GitHub issue:', issueError);
                  }
                } else {
                  statusMessage += `\n🔗 <a href="https://museum-tickets.nintendo.com/en/calendar">Zur Buchungsseite</a>\n`;
                }
                
                const now = new Date();
                const berlinTime = new Intl.DateTimeFormat('de-DE', {
                  timeZone: 'Europe/Berlin',
                  day: '2-digit',
                  month: '2-digit', 
                  year: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit',
                  second: '2-digit'
                }).format(now);
                
                statusMessage += `\n🕐 ${berlinTime}\n`;
                statusMessage += `⚡ Nächste Prüfung: in 10 Minuten`;
                
                // Send Telegram message
                console.log('📤 Sending status update...');
                const sent = await sendTelegramMessage(statusMessage);
                
                if (sent) {
                  console.log('✅ Status update sent successfully');
                } else {
                  console.error('❌ Failed to send status update');
                }
                
                return {
                  available: availableCount,
                  sold_out: soldOutCount,
                  closed: closedCount,
                  message_sent: sent
                };
                
              } catch (error) {
                console.error('💥 Error during monitoring:', error.message);
                
                const errorMessage = `❌ <b>Nintendo Museum Monitor Fehler</b>\n🕐 ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}\n🔧 ${error.message}\n💡 System wird beim nächsten Lauf erneut versuchen...`;
                
                await sendTelegramMessage(errorMessage);
                throw error;
              }
            }

            // Run the monitor
            const result = await checkNintendoMuseum();
            console.log('🎯 Monitoring result:', result);
