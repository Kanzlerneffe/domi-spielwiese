name: Museum Slot Monitor

on:
  schedule:
    - cron: '*/5 * * * *'  # L√§uft alle 5 Minuten
  workflow_dispatch:        # Erm√∂glicht manuelle Ausf√ºhrung

# Explizit den Schedule aktivieren
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write

jobs:
  check-museum-slots:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install axios cheerio

      - name: Check for slots
        uses: actions/github-script@v6
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const axios = require('axios');
            
            async function sendTelegramMessage(message) {
              try {
                console.log('Versuche Telegram-Nachricht zu senden...');
                
                if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
                  throw new Error('Telegram Credentials fehlen!');
                }
                
                const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
                console.log(`Sende an Chat ID: ${process.env.TELEGRAM_CHAT_ID}`);
                
                const response = await axios.post(telegramUrl, {
                  chat_id: process.env.TELEGRAM_CHAT_ID,
                  text: message,
                  parse_mode: 'HTML'
                });
                
                console.log('Telegram-Nachricht erfolgreich gesendet!');
                return response.data;
              } catch (error) {
                console.error('Fehler beim Senden der Telegram-Nachricht:', error);
                console.error('Error details:', {
                  message: error.message,
                  response: error.response ? {
                    status: error.response.status,
                    data: error.response.data
                  } : 'No response data'
                });
                throw error;
              }
            }
            
            async function checkSeptemberSlots() {
              try {
                console.log('Starte √úberpr√ºfung der September 2024 Slots...');
                
                console.log('Lade Kalenderseite...');
                const calendarResponse = await axios.get('https://museum-tickets.nintendo.com/en/calendar', {
                  headers: {
                    'Accept': 'text/html',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                  }
                });
                
                console.log('Kalenderseite erfolgreich geladen. Pr√ºfe September API...');
                
                const septemberUrl = 'https://museum-tickets.nintendo.com/api/calendar/2024-09';
                try {
                  const septemberResponse = await axios.get(septemberUrl, {
                    headers: {
                      'Accept': 'application/json',
                      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                    }
                  });
                  
                  console.log('September API Antwort erhalten');
                  
                  const septemberData = septemberResponse.data;
                  
                  if (!septemberData || !septemberData.days) {
                    console.log('September 2024 ist noch nicht verf√ºgbar.');
                    await sendTelegramMessage('‚ÑπÔ∏è <b>Status Update:</b>\nSeptember 2024 Termine sind noch nicht im System verf√ºgbar.');
                    return;
                  }
                  
                  // Erstelle eine sortierte Liste aller Septembertage
                  const allDays = Object.entries(septemberData.days)
                    .sort(([dateA], [dateB]) => dateA.localeCompare(dateB))
                    .map(([date, dayData]) => {
                      const availableSlots = [];
                      const unavailableSlots = [];
                      
                      if (dayData.availability && Array.isArray(dayData.availability)) {
                        dayData.availability.forEach(slot => {
                          if (slot.available === true) {
                            availableSlots.push({
                              time: slot.start_time,
                              remaining: slot.remaining_tickets || 'unbekannt'
                            });
                          } else {
                            unavailableSlots.push({
                              time: slot.start_time
                            });
                          }
                        });
                      }
                      
                      return {
                        date,
                        availableSlots,
                        unavailableSlots,
                        hasAvailable: availableSlots.length > 0
                      };
                    });
                  
                  // Erstelle die Nachricht
                  let message = `üéÆ <b>Nintendo Museum Status Update - September 2024</b>\n\n`;
                  
                  // Zuerst die Tage mit verf√ºgbaren Slots
                  const availableDays = allDays.filter(day => day.hasAvailable);
                  if (availableDays.length > 0) {
                    message += `‚úÖ <b>Verf√ºgbare Termine:</b>\n`;
                    availableDays.forEach(day => {
                      message += `\nüìÖ ${day.date}:\n`;
                      day.availableSlots.forEach(slot => {
                        message += `‚è∞ ${slot.time} (${slot.remaining} Tickets)\n`;
                      });
                    });
                  }
                  
                  // Dann die Tage ohne verf√ºgbare Slots
                  const unavailableDays = allDays.filter(day => !day.hasAvailable);
                  if (unavailableDays.length > 0) {
                    message += `\n‚ùå <b>Ausgebuchte Termine:</b>\n`;
                    unavailableDays.forEach(day => {
                      message += `\nüìÖ ${day.date}:\n`;
                      day.unavailableSlots.forEach(slot => {
                        message += `‚è∞ ${slot.time} (ausgebucht)\n`;
                      });
                    });
                  }
                  
                  message += `\nüîó <b>Buchungslink:</b> https://museum-tickets.nintendo.com/en/calendar`;
                  
                  // Sende die Nachricht
                  await sendTelegramMessage(message);
                  
                  // Wenn es verf√ºgbare Slots gibt, erstelle auch ein Issue
                  if (availableDays.length > 0) {
                    await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: `üéÆ ${availableDays.length} Tag(e) mit freien Slots im September 2024 gefunden!`,
                      body: message.replace(/<\/?b>/g, '**')
                    });
                  }
                  
                } catch (error) {
                  if (error.response && error.response.status === 404) {
                    console.log('September 2024 ist noch nicht im System.');
                    await sendTelegramMessage('‚ÑπÔ∏è <b>Status Update:</b>\nSeptember 2024 Termine sind noch nicht im System verf√ºgbar.');
                    return;
                  }
                  throw error;
                }
                
              } catch (error) {
                console.error('Fehler beim √úberpr√ºfen der Slots:', error);
                const errorMessage = `‚ùå <b>Fehler beim √úberpr√ºfen der Museum-Slots:</b>\n\n${error.message}\n\nDer Bot l√§uft weiter und pr√ºft beim n√§chsten Durchlauf erneut.`;
                await sendTelegramMessage(errorMessage);
                core.setFailed(error.message);
              }
            }
            
            await checkSeptemberSlots();
