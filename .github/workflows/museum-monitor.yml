name: Museum Slot Monitor

on:
  # schedule:
  #   - cron: '*/5 * * * *'
  workflow_dispatch:  # Erm√∂glicht weiterhin manuelle Ausf√ºhrung

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write

jobs:
  check-museum-slots:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install axios cheerio

      - name: Check for slots
        uses: actions/github-script@v6
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const axios = require('axios');
            
            async function sendTelegramMessage(message) {
              try {
                console.log('Versuche Telegram-Nachricht zu senden...');
                
                if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
                  throw new Error('Telegram Credentials fehlen!');
                }
                
                const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
                console.log(`Sende an Chat ID: ${process.env.TELEGRAM_CHAT_ID}`);
                
                const response = await axios.post(telegramUrl, {
                  chat_id: process.env.TELEGRAM_CHAT_ID,
                  text: message,
                  parse_mode: 'HTML'
                });
                
                console.log('Telegram-Nachricht erfolgreich gesendet!');
                return response.data;
              } catch (error) {
                console.error('Fehler beim Senden der Telegram-Nachricht:', error);
                throw error;
              }
            }

            function getDaysInMonth(year, month) {
              return new Date(year, month, 0).getDate();
            }

            function getStatusEmoji(saleStatus, openStatus) {
              if (openStatus === 2) return 'üîí'; // Geschlossen
              if (saleStatus === 1) return '‚úÖ'; // Verf√ºgbar
              if (saleStatus === 2) return '‚ùå'; // Ausverkauft
              return '‚ùì'; // Unbekannter Status
            }

            function getStatusText(saleStatus, openStatus, holiday) {
              if (openStatus === 2) return 'geschlossen';
              if (saleStatus === 1) return 'Tickets verf√ºgbar';
              if (saleStatus === 2) return 'ausverkauft';
              return 'Status unbekannt';
            }
            
            async function fetchSeptemberData() {
              try {
                const response = await axios.get('https://museum-tickets.nintendo.com/api/calendar/2024-09', {
                  headers: {
                    'Accept': 'application/json',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                  }
                });
                
                return response.data?.data?.calendar || {};
              } catch (error) {
                console.error('Fehler beim API-Aufruf:', error.message);
                throw error;
              }
            }
            
            async function checkSeptemberSlots() {
              try {
                console.log('Starte √úberpr√ºfung der September 2024 Slots...');
                
                const septemberData = await fetchSeptemberData();
                console.log('September Daten erhalten:', Object.keys(septemberData).length, 'Tage');
                
                // Erstelle die Nachricht
                let message = `üéÆ <b>Nintendo Museum Status Update - September 2024</b>\n\n`;
                
                // Gruppiere nach Wochen
                const weeks = {};
                Object.entries(septemberData).forEach(([date, dayData]) => {
                  const weekNum = Math.ceil(new Date(date).getDate() / 7);
                  if (!weeks[weekNum]) weeks[weekNum] = [];
                  weeks[weekNum].push({
                    date,
                    ...dayData
                  });
                });
                
                // F√ºge jede Woche zur Nachricht hinzu
                Object.entries(weeks).sort((a, b) => a[0] - b[0]).forEach(([weekNum, days]) => {
                  message += `\n<b>Woche ${weekNum}:</b>\n`;
                  days.sort((a, b) => a.date.localeCompare(b.date)).forEach(day => {
                    const date = new Date(day.date);
                    const dayName = date.toLocaleDateString('de-DE', { weekday: 'short' });
                    const dayNum = date.getDate();
                    
                    const emoji = getStatusEmoji(day.sale_status, day.open_status);
                    const status = getStatusText(day.sale_status, day.open_status, day.holiday);
                    
                    let dayLine = `${emoji} ${dayName} ${dayNum}: ${status}`;
                    if (day.holiday) {
                      dayLine += ` (${day.holiday})`;
                    }
                    message += dayLine + '\n';
                  });
                  message += '\n';
                });
                
                // F√ºge Legende hinzu
                message += `\n<b>Legende:</b>\n`;
                message += `‚úÖ = Tickets verf√ºgbar\n`;
                message += `‚ùå = Ausverkauft\n`;
                message += `üîí = Geschlossen\n`;
                message += `\nüîó <b>Buchungslink:</b> https://museum-tickets.nintendo.com/en/calendar`;
                
                // Sende die Nachricht
                await sendTelegramMessage(message);
                
                // Wenn es verf√ºgbare Tage gibt (sale_status = 1), erstelle ein Issue
                const hasAvailableDays = Object.values(septemberData)
                  .some(day => day.sale_status === 1 && day.open_status !== 2);
                
                if (hasAvailableDays) {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `üéÆ Tickets f√ºr September 2024 verf√ºgbar!`,
                    body: message.replace(/<\/?b>/g, '**')
                  });
                }
                
              } catch (error) {
                console.error('Fehler beim √úberpr√ºfen der Slots:', error);
                const errorMessage = `‚ùå <b>Fehler beim √úberpr√ºfen der Museum-Slots:</b>\n\n${error.message}\n\nDer Bot l√§uft weiter und pr√ºft beim n√§chsten Durchlauf erneut.`;
                await sendTelegramMessage(errorMessage);
                core.setFailed(error.message);
              }
            }
            
            await checkSeptemberSlots();
