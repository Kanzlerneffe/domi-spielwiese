name: Nintendo Museum Ticket Monitor üéÆ

on:
  schedule:
    - cron: '*/10 6-22 * * *'  # Alle 10 Minuten zwischen 8:00-00:00 Berlin Zeit
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write

jobs:
  monitor-nintendo-tickets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm install playwright node-fetch
          npx playwright install chromium

      - name: Monitor Nintendo Museum Tickets
        uses: actions/github-script@v7
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          script: |
            const { chromium } = require('playwright');
            
            async function sendTelegramMessage(message) {
              try {
                if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
                  console.log('‚ö†Ô∏è Telegram credentials missing - console output only');
                  console.log(message);
                  return;
                }
                
                const fetch = (await import('node-fetch')).default;
                const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: process.env.TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                  })
                });
                
                if (response.ok) {
                  console.log('‚úÖ Telegram message sent successfully');
                } else {
                  console.error('‚ùå Telegram API error:', await response.text());
                }
              } catch (error) {
                console.error('‚ùå Telegram error:', error.message);
                console.log('üìù Message (fallback):', message);
              }
            }

            async function checkNintendoMuseum() {
              let browser;
              
              try {
                console.log('üöÄ Starting browser...');
                browser = await chromium.launch({ 
                  headless: true,
                  args: ['--no-sandbox', '--disable-setuid-sandbox']
                });
                
                const page = await browser.newPage();
                
                // Set longer timeout and user agent
                page.setDefaultTimeout(45000);
                await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
                
                console.log('üéÆ Loading Nintendo Museum calendar...');
                await page.goto('https://museum-tickets.nintendo.com/en/calendar', {
                  waitUntil: 'domcontentloaded',
                  timeout: 45000
                });
                
                console.log('‚è≥ Waiting for page to fully load...');
                
                // Try multiple selectors to find calendar
                let calendarLoaded = false;
                const selectors = [
                  'gridcell',
                  '[role="gridcell"]',
                  '.calendar',
                  '[aria-label*="September"]',
                  'table'
                ];
                
                for (const selector of selectors) {
                  try {
                    console.log(`üîç Trying selector: ${selector}`);
                    await page.waitForSelector(selector, { timeout: 10000 });
                    console.log(`‚úÖ Found calendar with selector: ${selector}`);
                    calendarLoaded = true;
                    break;
                  } catch (e) {
                    console.log(`‚ùå Selector ${selector} failed: ${e.message}`);
                  }
                }
                
                if (!calendarLoaded) {
                  throw new Error('Calendar elements not found with any selector');
                }
                
                // Wait a bit more for dynamic content
                await page.waitForTimeout(3000);
                
                console.log('üîç Analyzing September calendar data...');
                
                const septemberData = await page.evaluate(() => {
                  const results = {};
                  const today = new Date();
                  const currentYear = today.getFullYear();
                  const targetYear = today.getMonth() >= 8 ? currentYear + 1 : currentYear;
                  
                  console.log('Target year:', targetYear);
                  
                  // Find all possible calendar cells
                  const possibleSelectors = [
                    'gridcell',
                    '[role="gridcell"]',
                    '.calendar-day',
                    '.day',
                    'td'
                  ];
                  
                  let cells = [];
                  for (const sel of possibleSelectors) {
                    const found = document.querySelectorAll(sel);
                    if (found.length > 0) {
                      cells = found;
                      console.log(`Found ${found.length} cells with selector: ${sel}`);
                      break;
                    }
                  }
                  
                  if (cells.length === 0) {
                    console.error('No calendar cells found!');
                    return {};
                  }
                  
                  cells.forEach((cell, index) => {
                    const dateText = cell.textContent?.trim();
                    const ariaLabel = cell.getAttribute('aria-label') || '';
                    const innerHTML = cell.innerHTML || '';
                    
                    console.log(`Cell ${index}: text="${dateText}", aria="${ariaLabel}"`);
                    
                    // Check if this is a September date
                    const isSeptember = ariaLabel.includes('September 2025') || 
                                       ariaLabel.includes('September ' + targetYear) ||
                                       (cell.closest('[data-month="9"]')) ||
                                       (cell.closest('.september'));
                    
                    if (isSeptember || (dateText && !isNaN(dateText) && dateText <= 31 && dateText >= 1)) {
                      const dayNum = dateText;
                      const hasOff = innerHTML.includes('"off"') || 
                                   innerHTML.includes('off') ||
                                   cell.classList.contains('off') ||
                                   cell.classList.contains('closed');
                      
                      const styles = window.getComputedStyle(cell);
                      const hasPointer = styles.cursor === 'pointer' ||
                                       cell.style.cursor === 'pointer' ||
                                       cell.hasAttribute('onclick') ||
                                       cell.querySelector('a');
                      
                      const isClickable = hasPointer && !hasOff;
                      
                      if (dayNum && !isNaN(dayNum) && dayNum <= 31 && dayNum >= 1) {
                        const formattedDate = `${dayNum.padStart(2, '0')}.09`;
                        
                        let status;
                        if (hasOff) {
                          status = 'üîí Museum geschlossen';
                        } else if (isClickable) {
                          status = 'üéüÔ∏è VERF√úGBAR - JETZT SCHNELL!';
                        } else {
                          status = '‚ùå Ausverkauft';
                        }
                        
                        results[formattedDate] = {
                          day: dayNum,
                          status: status,
                          available: isClickable,
                          closed: hasOff,
                          debug: {
                            hasOff,
                            hasPointer,
                            cursor: styles.cursor,
                            innerHTML: innerHTML.substring(0, 100)
                          }
                        };
                        
                        console.log(`Added date: ${formattedDate} - ${status}`);
                      }
                    }
                  });
                  
                  console.log('Final results:', Object.keys(results));
                  return results;
                });
                
                console.log('üìä September analysis complete:', Object.keys(septemberData).length, 'days found');
                
                if (Object.keys(septemberData).length === 0) {
                  // Try to get page content for debugging
                  const pageContent = await page.content();
                  const hasCalendar = pageContent.includes('September') || pageContent.includes('calendar');
                  
                  let debugMessage = '‚ö†Ô∏è <b>Nintendo Museum Monitor</b>\n\n';
                  debugMessage += 'Keine September-Daten gefunden.\n';
                  debugMessage += hasCalendar ? 'Kalender vorhanden, aber Parsing fehlgeschlagen.\n' : 'Kalender nicht geladen.\n';
                  debugMessage += '\nüîó <a href="https://museum-tickets.nintendo.com/en/calendar">Manuelle Pr√ºfung</a>';
                  debugMessage += '\nüîß Debug wird verbessert...';
                  
                  await sendTelegramMessage(debugMessage);
                  return;
                }
                
                // Build status message
                let message = 'üéÆ <b>Nintendo Museum Status Update</b>\n';
                message += 'üìÖ September 2025\n';
                message += '‚ö° <i>Monitoring alle 10 Minuten</i>\n\n';
                
                let availableCount = 0;
                let availableDates = [];
                
                // Sort dates and build message
                const sortedDates = Object.keys(septemberData).sort();
                
                sortedDates.forEach(date => {
                  const data = septemberData[date];
                  const emoji = data.available ? 'üéüÔ∏è' : (data.closed ? 'üîí' : '‚ùå');
                  message += `${emoji} <b>${date}</b> = ${data.status}\n`;
                  
                  if (data.available) {
                    availableCount++;
                    availableDates.push(date);
                  }
                });
                
                message += `\nüìä <b>Zusammenfassung:</b>\n`;
                message += `‚úÖ Verf√ºgbare Termine: ${availableCount}\n`;
                
                if (availableCount > 0) {
                  message += `üö® <b>SOFORT BUCHEN:</b> ${availableDates.join(', ')}\n`;
                  message += `üèÉ‚Äç‚ôÇÔ∏è <b>Tickets k√∂nnen schnell weg sein!</b>\n`;
                }
                
                message += `\nüîó <a href="https://museum-tickets.nintendo.com/en/calendar">Zur Buchungsseite</a>`;
                message += `\n‚è∞ ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}`;
                message += `\n‚ö° N√§chste Pr√ºfung: in 10 Minuten`;
                
                // Send message if tickets available OR every 6th run (hourly)
                const shouldSendUpdate = availableCount > 0 || (Math.floor(Date.now() / 600000) % 6 === 0);
                
                if (shouldSendUpdate) {
                  await sendTelegramMessage(message);
                } else {
                  console.log('üîï No tickets, waiting for hourly update...');
                }
                
                // Create GitHub issue if tickets are available
                if (availableCount > 0) {
                  const issueTitle = `üö® Nintendo Museum Tickets verf√ºgbar! (${availableDates.join(', ')})`;
                  const issueBody = `**üö® SOFORT HANDELN! üö®**\n\n${message.replace(/<[^>]*>/g, '')}\n\n[JETZT BUCHEN!](https://museum-tickets.nintendo.com/en/calendar)`;
                  
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: issueTitle,
                    body: issueBody,
                    labels: ['üéØ ticket-alert', 'üéÆ nintendo-museum', 'üö® urgent']
                  });
                  
                  console.log('üéØ GitHub issue created');
                }
                
              } catch (error) {
                console.error('üí• Error during monitoring:', error);
                
                let errorMsg = `‚ùå <b>Nintendo Museum Monitor Fehler</b>\n\n`;
                errorMsg += `<code>${error.message}</code>\n\n`;
                errorMsg += `‚è∞ N√§chste Pr√ºfung in 10 Minuten\n`;
                errorMsg += `üîß Fehler wird analysiert und behoben`;
                
                await sendTelegramMessage(errorMsg);
              } finally {
                if (browser) {
                  await browser.close();
                  console.log('üîí Browser closed');
                }
              }
            }
            
            await checkNintendoMuseum();
